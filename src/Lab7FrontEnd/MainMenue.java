/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Lab7FrontEnd;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.FlatLightLaf;
import javax.swing.UIManager;
/**
 *
 * @author AhmedAbdelwahed
 */
//import Graphics and color classes

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class MainMenue extends javax.swing.JFrame {

    /**
     * Creates new form MainMenue
     */
    SquareWindow squareW;
    RectangleWindow rectangleW;
    OvalWindow OvalW;
    LineSegmentWindow lineSegmentW;
    TriangleWindow triangleW;
    Graphics g;
    ImageIcon back = new ImageIcon("Paint.png");
    private Point firstPtClicked;
    private int oldx;
    private int oldy;
    Moveable clickedShape;
    boolean click;
    Graphics2D g2D;
    boolean clickedHandle;
    Point resizingPointClicked;
    NewJPanel TempNJ;

    public MainMenue() {

        initComponents();
        //get jpanel Graphics
        this.setTitle("Welcome to Paint!");
        g = newJPanel1.getGraphics();
        g2D = (Graphics2D) g;
        RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2D.setRenderingHints(rh);
        //newJPanel1.paintComponents(g);//get graphic object
        //squareW = new SquareWindow();
        rectangleW = new RectangleWindow(null, null, null, null);
        triangleW = new TriangleWindow(null, null, null, null);
        OvalW = new OvalWindow(null, null, null, null);
        lineSegmentW = new LineSegmentWindow(null, null, null, null);
        squareW = new SquareWindow(null, null, null, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        squareButton = new javax.swing.JButton();
        btnLine = new javax.swing.JButton();
        btnOval = new javax.swing.JButton();
        Copy = new javax.swing.JButton();
        btnRect = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        newJPanel1 = new Lab7FrontEnd.NewJPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        borderColorButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        fillColorButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        triangleButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        Load = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        squareButton.setBackground(new java.awt.Color(231, 231, 231));
        squareButton.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        squareButton.setForeground(new java.awt.Color(51, 51, 51));
        squareButton.setText("Square");
        squareButton.setMaximumSize(new java.awt.Dimension(80, 25));
        squareButton.setMinimumSize(new java.awt.Dimension(80, 25));
        squareButton.setPreferredSize(new java.awt.Dimension(80, 25));
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });
        getContentPane().add(squareButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 150, 40));

        btnLine.setBackground(new java.awt.Color(231, 231, 231));
        btnLine.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        btnLine.setForeground(new java.awt.Color(51, 51, 51));
        btnLine.setText("Line");
        btnLine.setMaximumSize(new java.awt.Dimension(80, 25));
        btnLine.setMinimumSize(new java.awt.Dimension(80, 25));
        btnLine.setPreferredSize(new java.awt.Dimension(80, 25));
        btnLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineActionPerformed(evt);
            }
        });
        getContentPane().add(btnLine, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 150, 40));

        btnOval.setBackground(new java.awt.Color(231, 231, 231));
        btnOval.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        btnOval.setForeground(new java.awt.Color(51, 51, 51));
        btnOval.setText("Oval");
        btnOval.setMaximumSize(new java.awt.Dimension(80, 25));
        btnOval.setMinimumSize(new java.awt.Dimension(80, 25));
        btnOval.setPreferredSize(new java.awt.Dimension(80, 25));
        btnOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOvalActionPerformed(evt);
            }
        });
        getContentPane().add(btnOval, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 150, 40));

        Copy.setBackground(new java.awt.Color(231, 231, 231));
        Copy.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        Copy.setForeground(new java.awt.Color(51, 51, 51));
        Copy.setText("Copy");
        Copy.setMaximumSize(new java.awt.Dimension(80, 25));
        Copy.setMinimumSize(new java.awt.Dimension(80, 25));
        Copy.setPreferredSize(new java.awt.Dimension(80, 25));
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        getContentPane().add(Copy, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 150, 40));

        btnRect.setBackground(new java.awt.Color(231, 231, 231));
        btnRect.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        btnRect.setForeground(new java.awt.Color(51, 51, 51));
        btnRect.setText("Rectangle");
        btnRect.setMaximumSize(new java.awt.Dimension(80, 25));
        btnRect.setMinimumSize(new java.awt.Dimension(80, 25));
        btnRect.setPreferredSize(new java.awt.Dimension(80, 25));
        btnRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRectActionPerformed(evt);
            }
        });
        getContentPane().add(btnRect, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 150, 40));

        jPanel1.setBackground(new java.awt.Color(255, 51, 51));

        newJPanel1.setBackground(new java.awt.Color(255, 255, 255));
        newJPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                newJPanel1MouseDragged(evt);
            }
        });
        newJPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newJPanel1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                newJPanel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                newJPanel1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout newJPanel1Layout = new javax.swing.GroupLayout(newJPanel1);
        newJPanel1.setLayout(newJPanel1Layout);
        newJPanel1Layout.setHorizontalGroup(
            newJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        newJPanel1Layout.setVerticalGroup(
            newJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 445, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 202, -1, -1));

        jComboBox1.setBackground(new java.awt.Color(231, 231, 231));
        jComboBox1.setFont(new java.awt.Font("Goudy Old Style", 1, 12)); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 50, 250, -1));

        borderColorButton.setBackground(new java.awt.Color(231, 231, 231));
        borderColorButton.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        borderColorButton.setText("Border Color");
        borderColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borderColorButtonActionPerformed(evt);
            }
        });
        getContentPane().add(borderColorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 130, 120, -1));

        resetButton.setBackground(new java.awt.Color(231, 231, 231));
        resetButton.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 90, 120, -1));

        jButton3.setBackground(new java.awt.Color(231, 231, 231));
        jButton3.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jButton3.setText("Delete Object");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 130, 120, -1));

        fillColorButton.setBackground(new java.awt.Color(231, 231, 231));
        fillColorButton.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        fillColorButton.setText("Fill Color");
        fillColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillColorButtonActionPerformed(evt);
            }
        });
        getContentPane().add(fillColorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 90, 120, -1));

        jButton1.setBackground(new java.awt.Color(231, 231, 231));
        jButton1.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jButton1.setText("Canvas Color");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 120, 110, -1));

        triangleButton.setBackground(new java.awt.Color(231, 231, 231));
        triangleButton.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        triangleButton.setForeground(new java.awt.Color(51, 51, 51));
        triangleButton.setText("Triangle");
        triangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleButtonActionPerformed(evt);
            }
        });
        getContentPane().add(triangleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 150, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Lab7FrontEnd/Paint.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, 20, 910, 670));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Lab7FrontEnd/color.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 920, 690));

        jMenu1.setText("File");

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        save.setText("Save as");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        Load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Load.setText("Load");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });
        jMenu1.add(Load);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineActionPerformed
        // TODO add your handling code here:
        lineSegmentW = new LineSegmentWindow(newJPanel1, jComboBox1, g, this);
        lineSegmentW.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnLineActionPerformed

    private void btnRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectActionPerformed
        // TODO add your handling code here:
        rectangleW = new RectangleWindow(newJPanel1, jComboBox1, g, this);
        rectangleW.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnRectActionPerformed

    private void btnOvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOvalActionPerformed
        // TODO add your handling code here:
        OvalW = new OvalWindow(newJPanel1, jComboBox1, g, this);
        OvalW.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnOvalActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void borderColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borderColorButtonActionPerformed
        // TODO add your handling code here:
        Color borderColor = jButton1.getBackground();
        int index = jComboBox1.getSelectedIndex();
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "The are no shapes to colorize ;) ");
            return;
        }
        Color c = JColorChooser.showDialog(null, "Colorize Border", borderColor);
        if (borderColor == null) {
            return;
        }
        Shape t = newJPanel1.getShapes()[index];
        t.setColor(c);
        //t.draw(g);
        newJPanel1.refresh(g);
    }//GEN-LAST:event_borderColorButtonActionPerformed

//    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
//        // TODO add your handling code here:
//        Color fillColor = jButton1.getBackground();
//        Color c = JColorChooser.showDialog(null, "Colorize Border",fillColor);
//        Color fillColor = jButton1.getBackground();
//        Color fill = JColorChooser.showDialog(null, "Colorize Fill",fillColor);
//         int index  = jComboBox1.getSelectedIndex();
//         if(fillColor==null||fillColor==null)
//             return;
//         Shape t = newJPanel1.getShapes().get(index);
//         t.setColor(c);
//         t.setFillColor(fill);
//         t.draw(g);
//         
//    }

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        int index = jComboBox1.getSelectedIndex();
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "The are no shapes to reset ;) ");
            return;
        }
        Shape t = newJPanel1.getShapes()[index];
        t.setColor(Color.BLACK);
        t.setFillColor(null);
        newJPanel1.refresh(g);
        //t.draw(g);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void fillColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillColorButtonActionPerformed
        // TODO add your handling code here:
        Color fillColor = jButton1.getBackground();
        int index = jComboBox1.getSelectedIndex();
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "The are no shapes to colorize ;) ");
            return;
        }
        if (fillColor == null) {
            return;
        }
        Shape t = newJPanel1.getShapes()[index];
        if (t instanceof LineSegment) {
            JOptionPane.showMessageDialog(null, "line segment has no fill color!!");
            return;
        }
        Color c = JColorChooser.showDialog(null, "Colorize Fill", fillColor);
        t.setFillColor(c);
        //newJPanel1.repaint();
        //t.draw(g);
        newJPanel1.refresh(g);

    }//GEN-LAST:event_fillColorButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        Color c = JColorChooser.showDialog(null, "Canvas Color", Color.WHITE);
        newJPanel1.setBackground(c);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int index = jComboBox1.getSelectedIndex();
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "The are no shapes to delete ;) ");
            return;
        }
        //newJPanel1.repaint();
        //System.out.println(index);
        jComboBox1.removeItemAt(index);
        newJPanel1.removeShape(newJPanel1.getShapes()[index]);
        newJPanel1.refresh(g);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed
        // TODO add your handling code here:
        squareW = new SquareWindow(newJPanel1, jComboBox1, g, this);
        squareW.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_squareButtonActionPerformed

    //to check that triangleW is valid
    public boolean is_Valid(double side1, double side2, double side3) {
        if (side1 + side2 > side3 && side2 + side3 > side1 && side1 + side3 > side2) {
            return true;
        } else {
            return false;
        }
    }
    private void triangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleButtonActionPerformed

        //System.out.println("el distance bel built in "+p2.distance(p3));
        //System.out.println("el distance bel satr "+Math.sqrt(Math.pow((double)(p2.x - p3.x), 2.0)+ Math.pow((double)(p2.y-p3.y),2.0)));
        triangleW = new TriangleWindow(newJPanel1, jComboBox1, g, this);
        triangleW.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_triangleButtonActionPerformed

    // MOUSE CLICKING EVENT (UPDATING COMBOBOX)
    private void newJPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newJPanel1MouseClicked
        Point p = evt.getPoint();

        System.out.println("clicking mouse at x = " + p.x + " and y = " + p.y);
        Shape[] ShapesArr = newJPanel1.getShapes();
        int numOfShapes = ShapesArr.length;

        for (int i = numOfShapes - 1; i >= 0; i--) {
            //System.out.println("shape: "+i); // testing (to be deleted)

            if (ShapesArr[i] instanceof Oval) {
                //System.out.println("Shape "+i+" is a circleW"); // testing (to be deleted) --> CIRCLE
                Oval c = (Oval) ShapesArr[i];
                if (c.contains(p)) {
                    System.out.println("You clicked on a CIRCLE!");
                    jComboBox1.setSelectedIndex(i);
                    this.clickedShape = (Moveable) c;
                    clickedShape.setDraggingPoint(p);
                    //c.drawHandles(g2D);
                    break;
                }
            }
            if (ShapesArr[i] instanceof Rectangle) {
                //System.out.println("Shape "+i+" is a rectangleW"); // testing (to be deleted) --> RECTANGLE
                Rectangle r = (Rectangle) ShapesArr[i];
                if (r.contains(p) || p == r.getSP1() || p == r.getSP2() || p == r.getSP3() || p == r.getSP4()) {
                    System.out.println("You clicked on a RECTANGLE!");
                    jComboBox1.setSelectedIndex(i);
                    this.clickedShape = (Moveable) r;
                    clickedShape.setDraggingPoint(p);
                    //r.drawHandles(g2D);
                    break;
                }
            }
            if (ShapesArr[i] instanceof Triangle) {
                //System.out.println("Shape "+i+" is a triangleW"); // testing (to be deleted) --> TRIANGLE
                Triangle t = (Triangle) ShapesArr[i];
                if (t.contains(p)) {
                    System.out.println("You clicked on a TRIANGLE!");
                    jComboBox1.setSelectedIndex(i);
                    this.clickedShape = (Moveable) t;
                    clickedShape.setDraggingPoint(p);
                    //t.drawHandles(g2D);
                    break;
                }
            }
            if (ShapesArr[i] instanceof LineSegment) {
                //System.out.println("Shape "+i+" is a line segment"); // testing (to be deleted) --> LINESEGMENT
                LineSegment l = (LineSegment) ShapesArr[i];
                if (l.contains(p)) {
                    System.out.println("You clicked on a LINE!");
                    jComboBox1.setSelectedIndex(i);
                    this.clickedShape = (Moveable) l;
                    clickedShape.setDraggingPoint(p);
                    break;
                }
            }
            //repaint();

        }

        //   if(clickedShape!=null)
        //{
        if (clickedShape != null) {
            if (clickedShape.setResizingPoint(p) != null) {
                System.out.println("3amal el f dmagho");
                resizingPointClicked = clickedShape.setResizingPoint(p);
            }
        }
        if (clickedShape != null) {
            clickedShape.drawHandles(g2D);
        } else {
            System.out.println("el shape b null fel click");
            repaint();
        }
        //}   
    }//GEN-LAST:event_newJPanel1MouseClicked

    private void newJPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newJPanel1MousePressed
        // TODO add your handling code here:
        Point p = evt.getPoint();
        //System.out.println("clicking mouse at x = " + p.x + " and y = " + p.y);
        Shape[] ShapesArr = newJPanel1.getShapes();
        int numOfShapes = ShapesArr.length;
        for (int i = numOfShapes - 1; i >= 0; i--) {
            //System.out.println("shape: "+i); // testing (to be deleted)

            if (ShapesArr[i] instanceof Oval) {
                //System.out.println("Shape "+i+" is a circleW"); // testing (to be deleted) --> CIRCLE
                Oval c = (Oval) ShapesArr[i];
                if (c.contains(p)) {
                    //System.out.println("You clicked on a CIRCLE!");
                    jComboBox1.setSelectedIndex(i);
                    this.clickedShape = (Moveable) c;
                    clickedShape.setDraggingPoint(p);
                    break;
                }
            }
            if (ShapesArr[i] instanceof Rectangle) {
                //System.out.println("Shape "+i+" is a rectangleW"); // testing (to be deleted) --> RECTANGLE
                Rectangle r = (Rectangle) ShapesArr[i];
                if (r.contains(p)) {
                    //System.out.println("You clicked on a RECTANGLE!");
                    jComboBox1.setSelectedIndex(i);
                    this.clickedShape = (Moveable) r;
                    clickedShape.setDraggingPoint(p);
                    //r.drawHandles(g2D);
                    break;
                }
            }
            if (ShapesArr[i] instanceof Triangle) {
                //System.out.println("Shape "+i+" is a triangleW"); // testing (to be deleted) --> TRIANGLE
                Triangle t = (Triangle) ShapesArr[i];
                if (t.contains(p)) {
                    //System.out.println("You clicked on a TRIANGLE!");
                    jComboBox1.setSelectedIndex(i);
                    this.clickedShape = (Moveable) t;
                    clickedShape.setDraggingPoint(p);
                    //t.drawHandles(g2D);
                    break;
                }
            }
            if (ShapesArr[i] instanceof LineSegment) {
                //System.out.println("Shape "+i+" is a line segment"); // testing (to be deleted) --> LINESEGMENT
                LineSegment l = (LineSegment) ShapesArr[i];
                if (l.contains(p)) {
                    //System.out.println("You clicked on a LINE!");
                    jComboBox1.setSelectedIndex(i);
                    this.clickedShape = (Moveable) l;
                    clickedShape.setDraggingPoint(p);
                    break;
                }
            }
        }

        if (clickedShape != null) {
            if (clickedShape.setResizingPoint(p) != null) {
                resizingPointClicked = clickedShape.setResizingPoint(p);
            }
        }
        if (clickedShape != null) {
            clickedShape.drawHandles(g2D);
        } else {
            System.out.println("el shape b null");
            repaint();
        }

    }//GEN-LAST:event_newJPanel1MousePressed


    private void newJPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newJPanel1MouseDragged
        // TODO add your handling code here:

        if (clickedShape != null && resizingPointClicked == null) {
            Point p = new Point(evt.getPoint().x, evt.getPoint().y);
            //Moveable ShapeTobeDragged = (Moveable)newJPanel1.getShapes()[0];
            //ShapeTobeDragged.setDraggingPoint(firstPtClicked);
            //ShapeTobeDragged.moveTo(evt.getPoint());
            clickedShape.moveTo(p);
            repaint();
        }
        if (resizingPointClicked != null) {
            Point p = new Point(evt.getPoint().x, evt.getPoint().y);
            //System.out.println("tmm ana triangle");
            //System.out.println("resizing point "+resizingPointClicked);
            //Triangle r = (Triangle)clickedShape;
            //r.drawHandles((Graphics2D) g);
            clickedShape.resize(p);
            repaint();
        }

    }//GEN-LAST:event_newJPanel1MouseDragged

    private void newJPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newJPanel1MouseReleased
        // TODO add your handling code here:
        clickedShape = null;
        click = false;
        resizingPointClicked = null;
    }//GEN-LAST:event_newJPanel1MouseReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_formWindowActivated

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        // TODO add your handling code here:
        if (clickedShape != null) {
            Shape clone = clickedShape.copy();
            newJPanel1.addShape(clone);
            if (clickedShape instanceof Oval) {
                newJPanel1.circleCounter++;
                jComboBox1.addItem("Oval " + newJPanel1.circleCounter);
            }
            if (clickedShape instanceof Triangle) {
                newJPanel1.triangleCounter++;
                jComboBox1.addItem("Triangle " + newJPanel1.triangleCounter);
            }
            if (clickedShape instanceof LineSegment) {
                newJPanel1.lineCounter++;
                jComboBox1.addItem("Line " + newJPanel1.lineCounter);
            }
            if (clickedShape instanceof Rectangle) {
                newJPanel1.rectangleCounter++;
                jComboBox1.addItem("Rectangle " + newJPanel1.rectangleCounter);
            }
            repaint();
        }

        /*if (newJPanel1.getShapes()[0]instanceof Triangle)
        {
            Triangle t = (Triangle) newJPanel1.getShapes()[0];
            newJPanel1.addShape(t.copy());
            int tt = newJPanel1.triangleCounter++;
            tt++;
            jComboBox1.addItem("Triangle "+tt);
            repaint();
        }*/

    }//GEN-LAST:event_CopyActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        AbstractShape[] shapes = newJPanel1.getShapes();

        if (shapes.length == 0) {
            JOptionPane.showMessageDialog(null, "There is nothing to be saved!");
            return;
        }
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            String path = f.getAbsolutePath();
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("numOfShapes", Integer.toString(shapes.length));
            for (int i = 0; i < shapes.length; i++) {
                String shapeName = shapes[i].getShapeName();
                String[] index = shapeName.split("_"); //[Rectangle,index]
                jsonObject.put("shapeName" + i, shapes[i].getShapeName() + i);
                jsonObject.put("borderColorRed" + i, Integer.toString(shapes[i].getBorderColor().getRed()));
                jsonObject.put("borderColorGreen" + i, Integer.toString(shapes[i].getBorderColor().getGreen()));
                jsonObject.put("borderColorBlue" + i, Integer.toString(shapes[i].getBorderColor().getBlue()));
                if (shapes[i].getFillColor() == null) {
                    jsonObject.put("filled" + i, "0");
                } else {
                    jsonObject.put("filled" + i, "1");
                    jsonObject.put("fillColorRed" + i, Integer.toString(shapes[i].getFillColor().getRed()));
                    jsonObject.put("fillColorGreen" + i, Integer.toString(shapes[i].getFillColor().getGreen()));
                    jsonObject.put("fillColorBlue" + i, Integer.toString(shapes[i].getFillColor().getBlue()));
                }
                jsonObject.put("positionX" + i, Integer.toString(shapes[i].getPosition().x));
                jsonObject.put("positionY" + i, Integer.toString(shapes[i].getPosition().y));

                if (shapes[i] instanceof Rectangle r) {
                    jsonObject.put("length" + i, Integer.toString(r.getLength()));
                    jsonObject.put("width" + i, Integer.toString(r.getWidth()));
                    System.out.println("saving rectangle");
                } else if (shapes[i] instanceof Triangle t) {
                    jsonObject.put("point2X" + i, Integer.toString(t.getPoint2().x));
                    jsonObject.put("point2Y" + i, Integer.toString(t.getPoint2().y));
                    jsonObject.put("point3X" + i, Integer.toString(t.getPoint3().x));
                    jsonObject.put("point3Y" + i, Integer.toString(t.getPoint3().y));
                    System.out.println("saving triangle");
                } else if (shapes[i] instanceof LineSegment) {
                    LineSegment l = (LineSegment) shapes[i];
                    jsonObject.put("point2X" + i, Integer.toString(l.getendPosition().x));
                    jsonObject.put("point2Y" + i, Integer.toString(l.getendPosition().y));
                    System.out.println("saving lineSegment");
                } else if (shapes[i] instanceof Oval) {
                    Oval o = (Oval) shapes[i];
                    jsonObject.put("horizontalR" + i, Integer.toString(o.getHradius()));
                    jsonObject.put("verticalR" + i, Integer.toString(o.getVRadius()));
                    System.out.println("saving oval");
                }
            }
            try {
                FileWriter file = new FileWriter(path);
                file.write(jsonObject.toJSONString());
                file.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(null, "saved Successfully");
            System.out.println("JSON File Saved Successfully!");
        }
    }//GEN-LAST:event_saveActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:                                          
        // TODO add your handling code here:
        newJPanel1.clearAll();
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            File tFile =  fileChooser.getSelectedFile();
            String filePath = file.getAbsolutePath();
            JSONParser jsonParser = new JSONParser();
            try {
                JSONObject jsonObject = (JSONObject) jsonParser.parse(new FileReader(filePath));
                String numOfShapesSt = (String) jsonObject.get("numOfShapes");
                int num = Integer.parseInt(numOfShapesSt);
                System.out.println("Number of Shapes in the file: " + num);
                for (int i = 0; i < num; i++) {
                    String shapeName = (String) jsonObject.get("shapeName" + i);
                    String[] shapeId = shapeName.split("_");
                    String shapeType = shapeId[0];
                    System.out.println("Shape Name Loading: " + shapeName);
                    String filled = (String) jsonObject.get("filled" + i);
                    int fillState = Integer.parseInt(filled);
                    Color fillColor = null;
                    System.out.println("fill state :  " + filled);
                    if (fillState == 1) {
                        System.out.println("The shape has a fill color");
                        String fillRed = (String) jsonObject.get("fillColorRed" + i);
                        int fR = Integer.parseInt(fillRed);
                        String fillGreen = (String) jsonObject.get("fillColorGreen" + i);
                        int fG = Integer.parseInt(fillGreen);
                        String fillBlue = (String) jsonObject.get("fillColorBlue" + i);
                        int fB = Integer.parseInt(fillBlue);
                        fillColor = new Color(fR, fG, fB);
                        /*FILL COLOR*/
                    }
                    String borderRed = (String) jsonObject.get("borderColorRed" + i);
                    int bR = Integer.parseInt(borderRed);
                    String borderGreen = (String) jsonObject.get("borderColorGreen" + i);
                    int bG = Integer.parseInt(borderGreen);
                    String borderBlue = (String) jsonObject.get("borderColorBlue" + i);
                    int bB = Integer.parseInt(borderBlue);
                    Color borderColor = new Color(bR, bG, bB);
                    /*BORDER COLOR*/
                    String posX = (String) jsonObject.get("positionX" + i);
                    int x = Integer.parseInt(posX);
                    String posY = (String) jsonObject.get("positionY" + i);
                    int y = Integer.parseInt(posY);
                    Point position = new Point(x, y);
                    /*POSITION*/
                    if (shapeType.equals("Rectangle")) {
                        String length = (String) jsonObject.get("length" + i);
                        int l = Integer.parseInt(length);
                        String width = (String) jsonObject.get("width" + i);
                        int w = Integer.parseInt(width);
                        Rectangle r = new Rectangle(position, l, w);
                        r.setBorderColor(borderColor);
                        if (filled.equals("1")) {
                            r.setFillColor(fillColor);
                        }

                        newJPanel1.addShape(r);
                        newJPanel1.circleCounter++;
                        this.jComboBox1.addItem("Rectangle"+newJPanel1.rectangleCounter);
                        repaint();
                    }

                    if (shapeType.equals("Oval")) {
                        String HorR = (String) jsonObject.get("horizontalR" + i);
                        int HR = Integer.parseInt(HorR);
                        String VerR = (String) jsonObject.get("verticalR" + i);
                        int VR = Integer.parseInt(VerR);
                        Oval o = new Oval(position, VR, HR);
                        o.setBorderColor(borderColor);
                        if (filled.equals("1")) {
                            o.setFillColor(fillColor);
                        }
                        /*       canvas.addShape(c);
        int tc = canvas.circleCounter++;
        tc++;
        comboBox.addItem("Circle "+ tc);*/
                        newJPanel1.addShape(o);
                        newJPanel1.circleCounter++;
                        this.jComboBox1.addItem("Oval"+newJPanel1.circleCounter);
                        repaint();
                    }
                    
                    
                        if (shapeType.equals("Triangle")) {
                        String Point2X = (String) jsonObject.get("point2X" + i);
                        int P2x = Integer.parseInt(Point2X);
                        String Point2Y = (String) jsonObject.get("point2Y" + i);
                        int P2y = Integer.parseInt(Point2Y);
                        String Point3X = (String) jsonObject.get("point3X" + i);
                        int P3x = Integer.parseInt(Point3X);
                        String Point3Y = (String) jsonObject.get("point3Y" + i);
                        int P3y = Integer.parseInt(Point3Y);
                        Point p2 = new Point(P2x,P2y);
                        Point p3 = new Point(P3x,P3y);
                        Triangle t = new Triangle(position, p2, p3);
                        t.setBorderColor(borderColor);
                        if (filled.equals("1")) {
                            t.setFillColor(fillColor);
                        }
                        newJPanel1.addShape(t);
                        newJPanel1.triangleCounter++;
                        this.jComboBox1.addItem("Triangle"+newJPanel1.circleCounter);
                        repaint();
                    }
                        if (shapeType.equals("Line")) {
                        String Point2X = (String) jsonObject.get("point2X" + i);
                        int P2x = Integer.parseInt(Point2X);
                        String Point2Y = (String) jsonObject.get("point2Y" + i);
                        int P2y = Integer.parseInt(Point2Y);
                        
                        Point p2 = new Point(P2x,P2y);
                        
                        LineSegment l = new LineSegment(position, p2);
                        l.setBorderColor(borderColor);
                        //if (filled.equals("1")) {
                        //    t.setFillColor(fillColor);
                        //}
                        newJPanel1.addShape(l);
                        newJPanel1.lineCounter++;
                        this.jComboBox1.addItem("LineSegment"+newJPanel1.circleCounter);
                        repaint();
                    }

                }
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
           try {
                FileReader fileT = new FileReader(filePath);
                //file.write(jsonObject.toJSONString());
                fileT.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
           
        }

    }//GEN-LAST:event_LoadActionPerformed

    public static boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
        } catch (NumberFormatException e) {
            return false;
        } catch (NullPointerException e) {
            return false;
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainMenue().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Copy;
    private javax.swing.JMenuItem Load;
    private javax.swing.JButton borderColorButton;
    private javax.swing.JButton btnLine;
    private javax.swing.JButton btnOval;
    private javax.swing.JButton btnRect;
    private javax.swing.JButton fillColorButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private Lab7FrontEnd.NewJPanel newJPanel1;
    private javax.swing.JButton resetButton;
    private javax.swing.JMenuItem save;
    private javax.swing.JButton squareButton;
    private javax.swing.JButton triangleButton;
    // End of variables declaration//GEN-END:variables

    private void addMouseListener() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /*@Override
    public void addShape(Shape shape) {
        getShapes().add(shape);
    }*/
    //@Override
    /*public void removeShape(Shape shape) {
        int i;
        int flag  = 0;
        for(i = 0; i < getShapes().size(); i++)
        {
            if(getShapes().get(i).equals(shape))
            {
                flag++;
                break;
            }
        }
        if(flag>0)
        getShapes().remove(i);
    }*/
    //@Override
    //public ArrayList<Shape> getShapes() {
    // return getShapes();
    //}
    //@Override
    // public void refresh(Graphics canvas) {
    //   drawingBoard.repaint();
    //}
    ///tmm
}
