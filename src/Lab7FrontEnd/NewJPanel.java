/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Lab7FrontEnd;

import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import static java.lang.Math.abs;

/**
 *
 * @author AhmedAbdelwahed
 */
public class NewJPanel extends javax.swing.JPanel implements DrawingEngine {

    private ArrayList<Shape> ShapesArr = new ArrayList();
    int Counter = 0;
    int circleCounter = 0;
    int squareCounter = 0;

    public void setShapesArr(ArrayList<Lab7FrontEnd.Shape> ShapesArr) {
        this.ShapesArr = ShapesArr;
    }
    int rectangleCounter = 0;
    int lineCounter = 0;
    int triangleCounter = 0;
    Point previousPoint;
    Point shapeCorner;
    
    
    /**
     * Creates new form NewJPanel
     */
    public NewJPanel() {
        initComponents();
      
        this.setLayout(new javax.swing.GroupLayout(this));
    }
    
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        System.out.println("pos clicked x  "+evt.getPoint().x+"y : "+evt.getPoint().y);
    }//GEN-LAST:event_formMouseClicked

    @Override
    public void addShape(Shape shape) {
        ShapesArr.add(shape);
    }

    @Override
    public void removeShape(Shape shape) {
        int i;
        for (i = 0; i < ShapesArr.size(); i++) {
            if (ShapesArr.get(i).equals(shape)) {
                ShapesArr.remove(i);
            }
        }
    }

    @Override
    public AbstractShape[] getShapes() {
        return ShapesArr.toArray(AbstractShape[]::new);
    }


    @Override
    public void refresh(Graphics canvas) {
        //NewJPanel n = new NewJPanel();
        //n.paintComponents(canvas);
        //n.repaint();
        this.paintComponent(canvas);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (int i = 0; i < ShapesArr.size(); i++) {
            ShapesArr.get(i).draw(g);
        }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
    /* MOUSE LISTENER CODE
    @Override
    public void mouseClicked(MouseEvent e) {
        Point p = e.getPoint();
        System.out.println("clicking mouse at x = " + p.x + " and y = " + p.y);
        
        int numOfShapes = ShapesArr.size();
        //System.out.println("number of shapes = "+numOfShapes); // testing (to be deleted)
        
        for(int i=numOfShapes-1;i>=0;i--){
            //System.out.println("shape: "+i); // testing (to be deleted)
            
            if(ShapesArr.get(i) instanceof Circle){
                //System.out.println("Shape "+i+" is a circle"); // testing (to be deleted) --> CIRCLE
                Circle c = (Circle)ShapesArr.get(i);
                if(c.contains(p)){
                    System.out.println("You clicked on a CIRCLE!");
                    break;
                }        
            }
            if(ShapesArr.get(i) instanceof Rectangle){
                //System.out.println("Shape "+i+" is a rectangle"); // testing (to be deleted) --> RECTANGLE
                Rectangle r = (Rectangle)ShapesArr.get(i);
                if(r.contains(p)){
                    System.out.println("You clicked on a RECTANGLE!");
                    break;
                } 
            }
            if(ShapesArr.get(i) instanceof Triangle){
                //System.out.println("Shape "+i+" is a triangle"); // testing (to be deleted) --> TRIANGLE
                Triangle t = (Triangle)ShapesArr.get(i);
                if(t.contains(p)){
                    System.out.println("You clicked on a TRIANGLE!");
                    break;
                } 
            }
            if(ShapesArr.get(i) instanceof LineSegment){
                //System.out.println("Shape "+i+" is a line segment"); // testing (to be deleted) --> LINESEGMENT
                LineSegment l = (LineSegment)ShapesArr.get(i);
                if(l.contains(p)){
                    System.out.println("You clicked on a LINE!");
                    break;
                } 
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }
*/
        public void clearAll ()
    {
        this.ShapesArr.clear();
    }
}
